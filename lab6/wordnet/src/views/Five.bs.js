// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/src/js/promise.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var LCH$Wordnet = require("../infrastructure/LCH.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Util$Wordnet = require("../infrastructure/Util.bs.js");
var Graph$Wordnet = require("../infrastructure/Graph.bs.js");
var Domain$Wordnet = require("../domain/Domain.bs.js");
var Wordnet$Wordnet = require("../infrastructure/Wordnet.bs.js");
var MaterialUi_Paper = require("@jsiebern/bs-material-ui/src/MaterialUi_Paper.bs.js");
var MaterialUi_Select = require("@jsiebern/bs-material-ui/src/MaterialUi_Select.bs.js");
var Relations$Wordnet = require("../domain/Relations.bs.js");
var MaterialUi_MenuItem = require("@jsiebern/bs-material-ui/src/MaterialUi_MenuItem.bs.js");
var MaterialUi_Typography = require("@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js");
var TaskDescription$Wordnet = require("../components/TaskDescription.bs.js");
var MaterialUi_CircularProgress = require("@jsiebern/bs-material-ui/src/MaterialUi_CircularProgress.bs.js");

var boldText = Css.style(/* :: */[
      Css.fontWeight(/* bold */-1055161979),
      /* [] */0
    ]);

var root = Css.style(/* :: */[
      Css.height(Css.pct(90)),
      /* [] */0
    ]);

var setPickerContainer = Css.style(/* :: */[
      Css.height(Css.rem(3)),
      /* :: */[
        Css.width(Css.pct(90)),
        /* :: */[
          Css.display(/* flex */-1010954439),
          /* [] */0
        ]
      ]
    ]);

var container = Css.style(/* :: */[
      Css.height(Css.rem(6)),
      /* :: */[
        Css.width(Css.pct(90)),
        /* :: */[
          Css.display(/* flex */-1010954439),
          /* [] */0
        ]
      ]
    ]);

var distanceBlock = Css.style(/* :: */[
      Css.height(Css.rem(6)),
      /* :: */[
        Css.width(Css.rem(16)),
        /* :: */[
          Css.display(/* flex */-1010954439),
          /* :: */[
            Css.alignItems(/* center */98248149),
            /* :: */[
              Css.marginLeft(Css.rem(0)),
              /* :: */[
                Css.marginRight(/* auto */-1065951377),
                /* :: */[
                  Css.paddingLeft(Css.rem(2)),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var setPicker = Css.style(/* :: */[
      Css.width(Css.rem(16)),
      /* :: */[
        Css.marginRight(Css.rem(0)),
        /* :: */[
          Css.marginLeft(/* auto */-1065951377),
          /* [] */0
        ]
      ]
    ]);

var graphContainer = Css.style(/* :: */[
      Css.height(Css.pct(90)),
      /* :: */[
        Css.width(Css.pct(90)),
        /* :: */[
          Css.display(/* flex */-1010954439),
          /* :: */[
            Css.justifyContent(/* center */98248149),
            /* [] */0
          ]
        ]
      ]
    ]);

var progressContainer = Css.style(/* :: */[
      Css.display(/* flex */-1010954439),
      /* :: */[
        Css.alignItems(/* center */98248149),
        /* :: */[
          Css.height(Css.rem(14)),
          /* [] */0
        ]
      ]
    ]);

var Styles = {
  boldText: boldText,
  root: root,
  setPickerContainer: setPickerContainer,
  container: container,
  distanceBlock: distanceBlock,
  setPicker: setPicker,
  graphContainer: graphContainer,
  progressContainer: progressContainer
};

var initialState = {
  relations: /* [] */0,
  synsetIds: /* [] */0,
  synsetMap: Belt_MapInt.empty,
  leftIndex: 0,
  rightIndex: 1,
  distance: undefined,
  ready: false
};

var words = [
  {
    lemma: "szkoda",
    senseNumber: 2
  },
  {
    lemma: "wypadek",
    senseNumber: 1
  },
  {
    lemma: "kolizja",
    senseNumber: 1
  },
  {
    lemma: "kolizja",
    senseNumber: 2
  },
  {
    lemma: "nieszczęście",
    senseNumber: 2
  },
  {
    lemma: "katastrofa budowlana",
    senseNumber: 1
  },
  {
    lemma: "coś",
    senseNumber: 1
  },
  {
    lemma: "rzecz",
    senseNumber: 1
  },
  {
    lemma: "obiekt",
    senseNumber: 1
  },
  {
    lemma: "nic",
    senseNumber: 1
  }
];

function loadRelations(leftIndex, rightIndex, send) {
  return $$Promise.Js.get($$Promise.Js.flatMap($$Promise.Js.map($$Promise.Js.flatMap($$Promise.Js.all(Belt_List.map(/* :: */[
                                  Belt_Array.getExn(words, leftIndex),
                                  /* :: */[
                                    Belt_Array.getExn(words, rightIndex),
                                    /* [] */0
                                  ]
                                ], (function (sense) {
                                    return $$Promise.Js.flatMap($$Promise.Js.map($$Promise.Js.map(Wordnet$Wordnet.searchSenses(sense.lemma), (function (senses) {
                                                          return Belt_List.keep(senses, (function (s) {
                                                                        if (s.lemma === sense.lemma) {
                                                                          return s.senseNumber === sense.senseNumber;
                                                                        } else {
                                                                          return false;
                                                                        }
                                                                      }));
                                                        })), Belt_List.headExn), (function (sense) {
                                                  return Wordnet$Wordnet.synsetForSenseId(sense.id);
                                                }));
                                  }))), (function (synsetIds) {
                            return $$Promise.Js.map($$Promise.Js.all(Belt_List.map(Belt_SetInt.toList(Belt_SetInt.fromArray(Belt_List.toArray(synsetIds))), (function (synsetId) {
                                                  return Relations$Wordnet.network(synsetId, 2, Caml_option.some(Belt_SetInt.fromArray([
                                                                      10,
                                                                      11
                                                                    ])), /* () */0);
                                                }))), (function (relations) {
                                          return /* tuple */[
                                                  synsetIds,
                                                  relations
                                                ];
                                        }));
                          })), (function (param) {
                        return /* tuple */[
                                param[0],
                                Belt_Set.toList(Belt_Set.fromArray(Belt_List.toArray(Belt_List.flatten(param[1])), Domain$Wordnet.RelationCmp))
                              ];
                      })), (function (param) {
                    var relations = param[1];
                    var distinctSynsetIds = Belt_SetInt.toList(Belt_SetInt.fromArray(Belt_List.toArray(param[0])));
                    return $$Promise.Js.map($$Promise.Js.map($$Promise.Js.all(Belt_List.map(Domain$Wordnet.distinctSynsets(relations), (function (synsetId) {
                                              return $$Promise.Js.map(Wordnet$Wordnet.sensesForSynset(synsetId), (function (senses) {
                                                            var synset = {
                                                              synsetId: synsetId,
                                                              senses: senses
                                                            };
                                                            return /* tuple */[
                                                                    synsetId,
                                                                    synset
                                                                  ];
                                                          }));
                                            }))), (function (synsets) {
                                      return Belt_MapInt.fromArray(Belt_List.toArray(synsets));
                                    })), (function (synsetMap) {
                                  return /* RelationsLoaded */Block.__(0, [
                                            distinctSynsetIds,
                                            relations,
                                            synsetMap
                                          ]);
                                }));
                  })), send);
}

var component = ReasonReact.reducerComponent("Five-Wordnet");

function make(param) {
  return {
          debugName: component.debugName,
          reactClassInternal: component.reactClassInternal,
          handedOffState: component.handedOffState,
          willReceiveProps: component.willReceiveProps,
          didMount: (function (self) {
              return loadRelations(self.state.leftIndex, self.state.rightIndex, self.send);
            }),
          didUpdate: component.didUpdate,
          willUnmount: component.willUnmount,
          willUpdate: component.willUpdate,
          shouldUpdate: component.shouldUpdate,
          render: (function (self) {
              var description = ReasonReact.element(undefined, undefined, TaskDescription$Wordnet.make(ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ["Display as a directed graph semantic relations between the groups of lexemes."])), []));
              var match = self.state.distance;
              var distanceBlock$1 = ReasonReact.element(undefined, undefined, MaterialUi_Paper.make(distanceBlock, undefined, undefined, undefined, undefined, undefined, [ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ["Leacock Chodorow: " + (
                                    match !== undefined ? (function (param) {
                                            return param.toFixed(5);
                                          })(match) : "?"
                                  )]))]));
              var chooseWord = function (index, onChange) {
                return React.createElement("div", {
                            className: setPickerContainer
                          }, ReasonReact.element(undefined, undefined, MaterialUi_Select.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function (param, update) {
                                      return Curry._1(onChange, update.props.value);
                                    }), undefined, undefined, undefined, undefined, undefined, /* `Int */[
                                    3654863,
                                    index
                                  ], undefined, undefined, undefined, setPicker, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, [Belt_Array.map(Belt_Array.zip(words, Belt_Array.range(0, words.length)), (function (param) {
                                            var index = param[1];
                                            var word = param[0];
                                            return ReasonReact.element(String(index), undefined, MaterialUi_MenuItem.make(undefined, undefined, undefined, undefined, undefined, /* `Int */[
                                                            3654863,
                                                            index
                                                          ], undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, [word.lemma + (" (" + (String(word.senseNumber) + ")"))]));
                                          }))])));
              };
              var mainNodes = Belt_Array.map(Belt_List.toArray(self.state.synsetIds), (function (synsetId) {
                      return {
                              id: synsetId,
                              label: Util$Wordnet.label(synsetId, self.state.synsetMap),
                              group: 1
                            };
                    }));
              var sideNodes = Belt_Array.map(Belt_List.toArray(Relations$Wordnet.closure(self.state.synsetIds, self.state.relations)), (function (synsetId) {
                      return {
                              id: synsetId,
                              label: Util$Wordnet.label(synsetId, self.state.synsetMap),
                              group: 2
                            };
                    }));
              var nodes = Belt_Array.concat(mainNodes, sideNodes);
              var edges = Belt_List.toArray(Belt_List.map(self.state.relations, (function (relation) {
                          return {
                                  from: relation.relFrom,
                                  to: relation.relTo,
                                  label: relation.relationName
                                };
                        })));
              var options = {
                nodes: {
                  shape: "dot",
                  size: 10,
                  shadow: true
                },
                edges: {
                  width: 1,
                  length: 200,
                  shadow: true,
                  smooth: {
                    type: "dynamic"
                  }
                },
                interaction: {
                  hideEdgesOnDrag: true
                }
              };
              var graph = ReasonReact.element(undefined, undefined, Graph$Wordnet.make(nodes, edges, options, []));
              return React.createElement("div", {
                          className: root
                        }, description, React.createElement("div", {
                              className: container
                            }, distanceBlock$1, React.createElement("div", undefined, chooseWord(self.state.leftIndex, (function (wordIndex) {
                                        return Curry._1(self.send, /* LeftWordChosen */Block.__(1, [wordIndex]));
                                      })), chooseWord(self.state.rightIndex, (function (wordIndex) {
                                        return Curry._1(self.send, /* RightWordChosen */Block.__(2, [wordIndex]));
                                      })))), React.createElement("div", {
                              className: graphContainer
                            }, self.state.ready ? graph : React.createElement("div", {
                                    className: progressContainer
                                  }, ReasonReact.element(undefined, undefined, MaterialUi_CircularProgress.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, [])))));
            }),
          initialState: (function (param) {
              return initialState;
            }),
          retainedProps: component.retainedProps,
          reducer: (function (action, state) {
              switch (action.tag | 0) {
                case /* RelationsLoaded */0 :
                    var relations = action[1];
                    var synsetIds = action[0];
                    var distance = Belt_Option.flatMap(Relations$Wordnet.shortestPathLength(synsetIds, relations), (function (shortestPath) {
                            return LCH$Wordnet.calculate(shortestPath, undefined, /* () */0);
                          }));
                    return /* Update */Block.__(0, [{
                                relations: relations,
                                synsetIds: synsetIds,
                                synsetMap: action[2],
                                leftIndex: state.leftIndex,
                                rightIndex: state.rightIndex,
                                distance: distance,
                                ready: true
                              }]);
                case /* LeftWordChosen */1 :
                    var leftIndex = action[0];
                    return /* UpdateWithSideEffects */Block.__(2, [
                              {
                                relations: state.relations,
                                synsetIds: state.synsetIds,
                                synsetMap: state.synsetMap,
                                leftIndex: leftIndex,
                                rightIndex: state.rightIndex,
                                distance: state.distance,
                                ready: false
                              },
                              (function (self) {
                                  return loadRelations(leftIndex, self.state.rightIndex, self.send);
                                })
                            ]);
                case /* RightWordChosen */2 :
                    var rightIndex = action[0];
                    return /* UpdateWithSideEffects */Block.__(2, [
                              {
                                relations: state.relations,
                                synsetIds: state.synsetIds,
                                synsetMap: state.synsetMap,
                                leftIndex: state.leftIndex,
                                rightIndex: rightIndex,
                                distance: state.distance,
                                ready: false
                              },
                              (function (self) {
                                  return loadRelations(self.state.leftIndex, rightIndex, self.send);
                                })
                            ]);
                
              }
            }),
          jsElementWrapped: component.jsElementWrapped
        };
}

exports.Styles = Styles;
exports.initialState = initialState;
exports.words = words;
exports.loadRelations = loadRelations;
exports.component = component;
exports.make = make;
/* boldText Not a pure module */
