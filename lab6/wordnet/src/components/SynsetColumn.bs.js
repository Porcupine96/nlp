// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var MaterialUi_Paper = require("@jsiebern/bs-material-ui/src/MaterialUi_Paper.bs.js");
var MaterialUi_Table = require("@jsiebern/bs-material-ui/src/MaterialUi_Table.bs.js");
var MaterialUi_TableRow = require("@jsiebern/bs-material-ui/src/MaterialUi_TableRow.bs.js");
var MaterialUi_TableBody = require("@jsiebern/bs-material-ui/src/MaterialUi_TableBody.bs.js");
var MaterialUi_TableCell = require("@jsiebern/bs-material-ui/src/MaterialUi_TableCell.bs.js");
var MaterialUi_TableHead = require("@jsiebern/bs-material-ui/src/MaterialUi_TableHead.bs.js");

var root = Css.style(/* :: */[
      Css.width(Css.pct(33)),
      /* :: */[
        Css.marginLeft(Css.px(10)),
        /* :: */[
          Css.marginRight(Css.px(10)),
          /* [] */0
        ]
      ]
    ]);

var Styles = {
  root: root
};

var component = ReasonReact.statelessComponent("SynsetColumn-Wordnet");

function make(synset, param) {
  return {
          debugName: component.debugName,
          reactClassInternal: component.reactClassInternal,
          handedOffState: component.handedOffState,
          willReceiveProps: component.willReceiveProps,
          didMount: component.didMount,
          didUpdate: component.didUpdate,
          willUnmount: component.willUnmount,
          willUpdate: component.willUpdate,
          shouldUpdate: component.shouldUpdate,
          render: (function (param) {
              var header = ReasonReact.element(undefined, undefined, MaterialUi_TableRow.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, [ReasonReact.element(undefined, undefined, MaterialUi_TableCell.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ["synset: " + String(synset.synsetId)]))]));
              var rows = Belt_Array.map(Belt_List.toArray(synset.senses), (function (sense) {
                      return ReasonReact.element(String(sense.id), undefined, MaterialUi_TableRow.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, [ReasonReact.element(undefined, undefined, MaterialUi_TableCell.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, [sense.lemma + (" (" + (sense.partOfSpeech + ")"))]))]));
                    }));
              return ReasonReact.element(undefined, undefined, MaterialUi_Paper.make(root, undefined, undefined, undefined, undefined, undefined, [ReasonReact.element(undefined, undefined, MaterialUi_Table.make(undefined, undefined, undefined, undefined, undefined, [
                                        ReasonReact.element(undefined, undefined, MaterialUi_TableHead.make(undefined, undefined, undefined, undefined, [header])),
                                        ReasonReact.element(undefined, undefined, MaterialUi_TableBody.make(undefined, undefined, undefined, undefined, [rows]))
                                      ]))]));
            }),
          initialState: component.initialState,
          retainedProps: component.retainedProps,
          reducer: component.reducer,
          jsElementWrapped: component.jsElementWrapped
        };
}

exports.Styles = Styles;
exports.component = component;
exports.make = make;
/* root Not a pure module */
