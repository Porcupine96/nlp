// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var $$Promise = require("reason-promise/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Wordnet$Wordnet = require("../infrastructure/Wordnet.bs.js");
var SynsetColumn$Wordnet = require("../components/SynsetColumn.bs.js");
var MaterialUi_Typography = require("@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js");
var TaskDescription$Wordnet = require("../components/TaskDescription.bs.js");
var MaterialUi_CircularProgress = require("@jsiebern/bs-material-ui/src/MaterialUi_CircularProgress.bs.js");

var boldText = Css.style(/* :: */[
      Css.fontWeight(/* bold */-1055161979),
      /* [] */0
    ]);

var columnContainer = Css.style(/* :: */[
      Css.height(Css.pct(100)),
      /* :: */[
        Css.width(Css.pct(90)),
        /* :: */[
          Css.display(/* flex */-1010954439),
          /* :: */[
            Css.justifyContent(/* center */98248149),
            /* :: */[
              Css.marginTop(Css.rem(2)),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var progressContainer = Css.style(/* :: */[
      Css.display(/* flex */-1010954439),
      /* :: */[
        Css.alignItems(/* center */98248149),
        /* :: */[
          Css.height(Css.rem(14)),
          /* [] */0
        ]
      ]
    ]);

var Styles = {
  boldText: boldText,
  columnContainer: columnContainer,
  progressContainer: progressContainer
};

function loadSynsets(send) {
  return $$Promise.Js.get($$Promise.Js.map($$Promise.Js.flatMap($$Promise.Js.flatMap(Wordnet$Wordnet.searchSenses("szkoda"), (function (senses) {
                            return $$Promise.Js.all(Belt_List.map(senses, (function (sense) {
                                              return Wordnet$Wordnet.synsetForSenseId(sense.id);
                                            })));
                          })), (function (synsetIds) {
                        return $$Promise.Js.all(Belt_List.map(synsetIds, (function (synsetId) {
                                          return $$Promise.Js.map(Wordnet$Wordnet.sensesForSynset(synsetId), (function (senses) {
                                                        return {
                                                                synsetId: synsetId,
                                                                senses: senses
                                                              };
                                                      }));
                                        })));
                      })), (function (synsets) {
                    return /* SynsetsLoaded */[synsets];
                  })), send);
}

var initialState = {
  synsets: /* [] */0,
  ready: false
};

var component = ReasonReact.reducerComponent("One-Wordnet");

function make(param) {
  return {
          debugName: component.debugName,
          reactClassInternal: component.reactClassInternal,
          handedOffState: component.handedOffState,
          willReceiveProps: component.willReceiveProps,
          didMount: (function (self) {
              return loadSynsets(self.send);
            }),
          didUpdate: component.didUpdate,
          willUnmount: component.willUnmount,
          willUpdate: component.willUpdate,
          shouldUpdate: component.shouldUpdate,
          render: (function (self) {
              var description = ReasonReact.element(undefined, undefined, TaskDescription$Wordnet.make(ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, [
                                "Find all meaning of the szkoda ",
                                React.createElement("b", undefined, " noun "),
                                "and display all their synonyms."
                              ])), []));
              var columns = Belt_List.toArray(Belt_List.map(self.state.synsets, (function (synset) {
                          return ReasonReact.element(String(synset.synsetId), undefined, SynsetColumn$Wordnet.make(synset, []));
                        })));
              return React.createElement("div", undefined, description, React.createElement("div", {
                              className: columnContainer
                            }, self.state.ready ? columns : React.createElement("div", {
                                    className: progressContainer
                                  }, ReasonReact.element(undefined, undefined, MaterialUi_CircularProgress.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, [])))));
            }),
          initialState: (function (param) {
              return initialState;
            }),
          retainedProps: component.retainedProps,
          reducer: (function (action, param) {
              return /* Update */Block.__(0, [{
                          synsets: action[0],
                          ready: true
                        }]);
            }),
          jsElementWrapped: component.jsElementWrapped
        };
}

exports.Styles = Styles;
exports.loadSynsets = loadSynsets;
exports.initialState = initialState;
exports.component = component;
exports.make = make;
/* boldText Not a pure module */
