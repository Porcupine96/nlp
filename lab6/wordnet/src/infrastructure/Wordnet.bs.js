// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Repromise = require("@aantron/repromise/src/js/repromise.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

((require('isomorphic-fetch')));

var apiUrl = "http://api.slowosiec.clarin-pl.eu/plwordnet-api";

function senseDecoder(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* lemma */Json_decode.field("lemma", (function (json) {
                  return {
                          word: Json_decode.field("word", Json_decode.string, json)
                        };
                }), json).word,
          /* partOfSpeech */Json_decode.field("partOfSpeech", (function (json) {
                  return {
                          lmfType: Json_decode.field("lmfType", Json_decode.string, json)
                        };
                }), json).lmfType,
          /* senseNumber */Json_decode.field("senseNumber", Json_decode.$$int, json)
        ];
}

function synsetDecoder(json) {
  return Json_decode.field("id", Json_decode.$$int, json);
}

function relationIdToKind(relationId) {
  if (relationId !== 10) {
    if (relationId !== 11) {
      return /* Other */2;
    } else {
      return /* Hypernymy */1;
    }
  } else {
    return /* Hyponym */0;
  }
}

function relationDecoder(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* relFrom */Json_decode.field("synsetFrom", (function (json) {
                  return {
                          id: Json_decode.field("id", Json_decode.$$int, json)
                        };
                }), json).id,
          /* relTo */Json_decode.field("synsetTo", (function (json) {
                  return {
                          id: Json_decode.field("id", Json_decode.$$int, json)
                        };
                }), json).id,
          /* relationKind */relationIdToKind(Json_decode.field("relation", (function (json) {
                      return Json_decode.field("id", Json_decode.$$int, json);
                    }), json)),
          /* relationId */Json_decode.field("relation", (function (json) {
                  return Json_decode.field("id", Json_decode.$$int, json);
                }), json),
          /* relationName */Json_decode.field("relation", (function (json) {
                  return Json_decode.field("name", Json_decode.string, json);
                }), json)
        ];
}

function decode(json) {
  return /* record */[/* senses */Json_decode.field("content", (function (param) {
                  return Json_decode.list(senseDecoder, param);
                }), json)];
}

function searchSenses(word) {
  return Repromise.Rejectable[/* map */5]((function (res) {
                return res[/* senses */0];
              }), Repromise.Rejectable[/* fromJsPromise */10](fetch(apiUrl + ("/senses/search?lemma=" + word)).then((function (prim) {
                          return prim.json();
                        })).then((function (json) {
                        return Promise.resolve(decode(json));
                      }))));
}

function synsetForSenseId(senseId) {
  return Repromise.Rejectable[/* fromJsPromise */10](fetch(apiUrl + ("/senses/" + (String(senseId) + "/synset"))).then((function (prim) {
                      return prim.json();
                    })).then((function (json) {
                    return Promise.resolve(Json_decode.field("id", Json_decode.$$int, json));
                  })));
}

function sensesForSynset(synsetId) {
  return Repromise.Rejectable[/* fromJsPromise */10](fetch(apiUrl + ("/synsets/" + (String(synsetId) + "/senses"))).then((function (prim) {
                      return prim.json();
                    })).then((function (json) {
                    return Promise.resolve(Json_decode.list(senseDecoder, json));
                  })));
}

function relationsForSynset(synsetId) {
  return Repromise.Rejectable[/* fromJsPromise */10](fetch(apiUrl + ("/synsets/" + (String(synsetId) + "/relations"))).then((function (prim) {
                      return prim.json();
                    })).then((function (json) {
                    return Promise.resolve(Json_decode.list(relationDecoder, json));
                  })));
}

exports.apiUrl = apiUrl;
exports.senseDecoder = senseDecoder;
exports.synsetDecoder = synsetDecoder;
exports.relationIdToKind = relationIdToKind;
exports.relationDecoder = relationDecoder;
exports.searchSenses = searchSenses;
exports.synsetForSenseId = synsetForSenseId;
exports.sensesForSynset = sensesForSynset;
exports.relationsForSynset = relationsForSynset;
/*  Not a pure module */
