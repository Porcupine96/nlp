// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Wordnet$Wordnet = require("../infrastructure/Wordnet.bs.js");

function network(synsetId, $staropt$star, relKinds, param) {
  var maxDepth = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : 1;
  var visited = {
    contents: Belt_SetInt.empty
  };
  var relationIds = {
    contents: Belt_SetInt.empty
  };
  var _network = function (synsetId, $staropt$star, param) {
    var maxDepth = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : 1;
    if (maxDepth === 0) {
      return $$Promise.Js.resolved(/* [] */0);
    }
    return $$Promise.Js.map($$Promise.Js.flatMap(Wordnet$Wordnet.relationsForSynset(synsetId), (function (relations) {
                      var allowedRelations = Belt_Option.getWithDefault(Belt_Option.map(relKinds, (function (allowed) {
                                  return Belt_List.keep(relations, (function (relation) {
                                                return Belt_SetInt.has(allowed, relation.relationId);
                                              }));
                                })), relations);
                      var newRelations = Belt_List.keep(allowedRelations, (function (relation) {
                              return !Belt_SetInt.has(relationIds.contents, relation.id);
                            }));
                      Belt_List.forEach(newRelations, (function (relation) {
                              relationIds.contents = Belt_SetInt.add(relationIds.contents, relation.id);
                              return /* () */0;
                            }));
                      return $$Promise.Js.all(Belt_List.map(newRelations, (function (relation) {
                                        var match = relation.relFrom;
                                        var match$1 = relation.relTo;
                                        if (match === synsetId && !Belt_SetInt.has(visited.contents, match$1)) {
                                          visited.contents = Belt_SetInt.add(visited.contents, match$1);
                                          return $$Promise.Js.map(_network(match$1, Caml_option.some(Belt_Option.map(maxDepth, (function (d) {
                                                                    return d - 1 | 0;
                                                                  }))), /* () */0), (function (result) {
                                                        return Belt_List.concat(newRelations, result);
                                                      }));
                                        } else if (match$1 === synsetId && !Belt_SetInt.has(visited.contents, match)) {
                                          visited.contents = Belt_SetInt.add(visited.contents, match);
                                          return $$Promise.Js.map(_network(match, Caml_option.some(Belt_Option.map(maxDepth, (function (d) {
                                                                    return d - 1 | 0;
                                                                  }))), /* () */0), (function (result) {
                                                        return Belt_List.concat(newRelations, result);
                                                      }));
                                        } else {
                                          return $$Promise.Js.resolved(/* [] */0);
                                        }
                                      })));
                    })), Belt_List.flatten);
  };
  return _network(synsetId, Caml_option.some(maxDepth), /* () */0);
}

function path(synsetId, relationKind, $staropt$star, param) {
  var maxLength = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : undefined;
  if (maxLength === 0) {
    return $$Promise.Js.resolved(/* [] */0);
  }
  return $$Promise.Js.map($$Promise.Js.flatMap(Wordnet$Wordnet.relationsForSynset(synsetId), (function (relations) {
                    var filteredRelations = Belt_List.keep(Belt_List.keep(relations, (function (relation) {
                                return relation.relationKind === relationKind;
                              })), (function (relation) {
                            return relation.relTo === synsetId;
                          }));
                    return $$Promise.Js.all(Belt_List.map(filteredRelations, (function (relation) {
                                      return $$Promise.Js.map(path(relation.relFrom, relationKind, Caml_option.some(Belt_Option.map(maxLength, (function (d) {
                                                                return d - 1 | 0;
                                                              }))), /* () */0), (function (result) {
                                                    return Belt_List.concat(filteredRelations, result);
                                                  }));
                                    })));
                  })), Belt_List.flatten);
}

function nodesInPath(a, b, relations) {
  var visited = {
    contents: Belt_SetInt.empty
  };
  var _search = function (currentNode, route) {
    if (currentNode === b) {
      return route;
    } else {
      var updatedRoute = Belt_List.add(route, currentNode);
      visited.contents = Belt_SetInt.add(visited.contents, currentNode);
      return Belt_List.flatten(Belt_List.map(relations, (function (relation) {
                        var match = relation.relFrom;
                        var match$1 = relation.relTo;
                        if (match === currentNode && !Belt_SetInt.has(visited.contents, match$1)) {
                          return _search(match$1, updatedRoute);
                        } else if (match$1 === currentNode && !Belt_SetInt.has(visited.contents, match)) {
                          return _search(match, updatedRoute);
                        } else {
                          return /* [] */0;
                        }
                      })));
    }
  };
  return _search(a, /* [] */0);
}

function closure(synsetIds, relations) {
  return Belt_SetInt.toList(Belt_SetInt.fromArray(Belt_List.toArray(Belt_List.keep(Belt_List.flatten(Belt_List.map(Belt_List.flatten(Belt_List.map(synsetIds, (function (a) {
                                            return Belt_List.keep(Belt_List.map(synsetIds, (function (b) {
                                                              return /* tuple */[
                                                                      a,
                                                                      b
                                                                    ];
                                                            })), (function (param) {
                                                          return param[0] !== param[1];
                                                        }));
                                          }))), (function (param) {
                                    return nodesInPath(param[0], param[1], relations);
                                  }))), (function (synsetId) {
                            return !Belt_List.has(synsetIds, synsetId, (function (prim, prim$1) {
                                          return prim === prim$1;
                                        }));
                          })))));
}

function shortestPathLength(synsetIds, relations) {
  return Belt_Option.map(Belt_List.head(Belt_List.sort(Belt_List.map(Belt_List.flatten(Belt_List.map(synsetIds, (function (a) {
                                    return Belt_List.keep(Belt_List.map(synsetIds, (function (b) {
                                                      return /* tuple */[
                                                              a,
                                                              b
                                                            ];
                                                    })), (function (param) {
                                                  return param[0] !== param[1];
                                                }));
                                  }))), (function (param) {
                            return nodesInPath(param[0], param[1], relations);
                          })), (function (a, b) {
                        return Belt_List.length(a) - Belt_List.length(b) | 0;
                      }))), (function (path) {
                return Belt_List.length(path) / 2 | 0;
              }));
}

exports.network = network;
exports.path = path;
exports.nodesInPath = nodesInPath;
exports.closure = closure;
exports.shortestPathLength = shortestPathLength;
/* Promise Not a pure module */
