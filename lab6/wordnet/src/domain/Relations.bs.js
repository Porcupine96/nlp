// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Wordnet$Wordnet = require("../infrastructure/Wordnet.bs.js");

function network(synsetId, $staropt$star, param) {
  var maxDepth = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : 1;
  var visited = /* record */[/* contents */Belt_SetInt.empty];
  var relationIds = /* record */[/* contents */Belt_SetInt.empty];
  var _network = function (synsetId, $staropt$star, param) {
    var maxDepth = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : 1;
    var exit = 0;
    if (maxDepth !== undefined && maxDepth === 0) {
      return Repromise.Rejectable[/* resolved */2](/* [] */0);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      return Repromise.Rejectable[/* map */5](Belt_List.flatten, Repromise.Rejectable[/* andThen */4]((function (relations) {
                        var newRelations = Belt_List.keep(relations, (function (relation) {
                                return !Belt_SetInt.has(relationIds[0], relation[/* id */0]);
                              }));
                        Belt_List.forEach(newRelations, (function (relation) {
                                relationIds[0] = Belt_SetInt.add(relationIds[0], relation[/* id */0]);
                                return /* () */0;
                              }));
                        return Repromise.Rejectable[/* all */8](Belt_List.map(newRelations, (function (relation) {
                                          var match = relation[/* relFrom */1];
                                          var match$1 = relation[/* relTo */2];
                                          if (match === synsetId && !Belt_SetInt.has(visited[0], match$1)) {
                                            visited[0] = Belt_SetInt.add(visited[0], match$1);
                                            return Repromise.Rejectable[/* map */5]((function (result) {
                                                          return Belt_List.concat(newRelations, result);
                                                        }), _network(match$1, Caml_option.some(Belt_Option.map(maxDepth, (function (d) {
                                                                      return d - 1 | 0;
                                                                    }))), /* () */0));
                                          } else if (match$1 === synsetId && !Belt_SetInt.has(visited[0], match)) {
                                            visited[0] = Belt_SetInt.add(visited[0], match);
                                            return Repromise.Rejectable[/* map */5]((function (result) {
                                                          return Belt_List.concat(newRelations, result);
                                                        }), _network(match, Caml_option.some(Belt_Option.map(maxDepth, (function (d) {
                                                                      return d - 1 | 0;
                                                                    }))), /* () */0));
                                          } else {
                                            return Repromise.Rejectable[/* resolved */2](/* [] */0);
                                          }
                                        })));
                      }), Wordnet$Wordnet.relationsForSynset(synsetId)));
    }
    
  };
  return _network(synsetId, Caml_option.some(maxDepth), /* () */0);
}

function path(synsetId, relationKind, $staropt$star, param) {
  var maxLength = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : undefined;
  var exit = 0;
  if (maxLength !== undefined && maxLength === 0) {
    return Repromise.Rejectable[/* resolved */2](/* [] */0);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return Repromise.Rejectable[/* map */5](Belt_List.flatten, Repromise.Rejectable[/* andThen */4]((function (relations) {
                      var filteredRelations = Belt_List.keep(Belt_List.keep(relations, (function (relation) {
                                  return relation[/* relationKind */3] === relationKind;
                                })), (function (relation) {
                              return relation[/* relTo */2] === synsetId;
                            }));
                      return Repromise.Rejectable[/* all */8](Belt_List.map(filteredRelations, (function (relation) {
                                        return Repromise.Rejectable[/* map */5]((function (result) {
                                                      return Belt_List.concat(filteredRelations, result);
                                                    }), path(relation[/* relFrom */1], relationKind, Caml_option.some(Belt_Option.map(maxLength, (function (d) {
                                                                  return d - 1 | 0;
                                                                }))), /* () */0));
                                      })));
                    }), Wordnet$Wordnet.relationsForSynset(synsetId)));
  }
  
}

function nodesInShortesPath(a, b, relations) {
  var visited = /* record */[/* contents */Belt_SetInt.empty];
  var _search = function (currentNode, route) {
    if (currentNode === b) {
      return route;
    } else {
      var updatedRoute = Belt_List.add(route, currentNode);
      visited[0] = Belt_SetInt.add(visited[0], currentNode);
      return Belt_List.flatten(Belt_List.map(relations, (function (relation) {
                        var match = relation[/* relFrom */1];
                        var match$1 = relation[/* relTo */2];
                        if (match === currentNode && !Belt_SetInt.has(visited[0], match$1)) {
                          return _search(match$1, updatedRoute);
                        } else if (match$1 === currentNode && !Belt_SetInt.has(visited[0], match)) {
                          return _search(match, updatedRoute);
                        } else {
                          return /* [] */0;
                        }
                      })));
    }
  };
  return _search(a, /* [] */0);
}

function closure(synsetIds, relations) {
  return Belt_SetInt.toList(Belt_SetInt.fromArray(Belt_List.toArray(Belt_List.keep(Belt_List.flatten(Belt_List.map(Belt_List.flatten(Belt_List.map(synsetIds, (function (a) {
                                            return Belt_List.keep(Belt_List.map(synsetIds, (function (b) {
                                                              return /* tuple */[
                                                                      a,
                                                                      b
                                                                    ];
                                                            })), (function (param) {
                                                          return param[0] !== param[1];
                                                        }));
                                          }))), (function (param) {
                                    return nodesInShortesPath(param[0], param[1], relations);
                                  }))), (function (synsetId) {
                            return !Belt_List.has(synsetIds, synsetId, Caml_obj.caml_equal);
                          })))));
}

exports.network = network;
exports.path = path;
exports.nodesInShortesPath = nodesInShortesPath;
exports.closure = closure;
/* Repromise Not a pure module */
