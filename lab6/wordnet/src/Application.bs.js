// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var One$Wordnet = require("./views/One.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Two$Wordnet = require("./views/Two.bs.js");
var Five$Wordnet = require("./views/Five.bs.js");
var Four$Wordnet = require("./views/Four.bs.js");
var Three$Wordnet = require("./views/Three.bs.js");
var Layout$Wordnet = require("./Layout.bs.js");
var Router$Wordnet = require("./Router.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");

var container = Css.style(/* :: */[
      Css.height(Css.pct(100)),
      /* [] */0
    ]);

var Styles = {
  container: container
};

var initialState = {
  route: /* One */0
};

var component = ReasonReact.reducerComponent("Application-Wordnet");

function routeToComponent(route) {
  switch (route) {
    case /* One */0 :
        return ReasonReact.element("1", undefined, One$Wordnet.make([]));
    case /* Two */1 :
        return ReasonReact.element("2", undefined, Two$Wordnet.make([]));
    case /* Three */2 :
        return ReasonReact.element("3", undefined, Three$Wordnet.make([]));
    case /* Four */3 :
        return ReasonReact.element("4", undefined, Four$Wordnet.make([]));
    case /* Five */4 :
        return ReasonReact.element("5", undefined, Five$Wordnet.make([]));
    
  }
}

function make(param) {
  return {
          debugName: component.debugName,
          reactClassInternal: component.reactClassInternal,
          handedOffState: component.handedOffState,
          willReceiveProps: component.willReceiveProps,
          didMount: (function (self) {
              var watcherId = ReasonReactRouter.watchUrl((function (url) {
                      return Curry._1(self.send, /* UpdateRoute */[Router$Wordnet.mapUrlToRoute(url)]);
                    }));
              return Curry._1(self.onUnmount, (function (param) {
                            return ReasonReactRouter.unwatchUrl(watcherId);
                          }));
            }),
          didUpdate: component.didUpdate,
          willUnmount: component.willUnmount,
          willUpdate: component.willUpdate,
          shouldUpdate: component.shouldUpdate,
          render: (function (self) {
              return React.createElement("div", {
                          className: container
                        }, ReasonReact.element(undefined, undefined, Layout$Wordnet.make([routeToComponent(self.state.route)])));
            }),
          initialState: (function (param) {
              return initialState;
            }),
          retainedProps: component.retainedProps,
          reducer: (function (action, param) {
              return /* Update */Block.__(0, [{
                          route: action[0]
                        }]);
            }),
          jsElementWrapped: component.jsElementWrapped
        };
}

exports.Styles = Styles;
exports.initialState = initialState;
exports.component = component;
exports.routeToComponent = routeToComponent;
exports.make = make;
/* container Not a pure module */
